function menu(t,i,{elements:e,classList:s}){t.onclick=()=>{if(t.classList.contains(i))t.style.top=t.style.left="";else{let i=t.getBoundingClientRect();t.style.left=i.left+"px",t.style.top=i.top+"px"}t.classList.toggle(i),e.forEach((t,i)=>{s[i]&&t.classList.toggle(s[i])})}}class Slider{constructor(t,{pointClassName:i,pointsElem:e,time:s,arrowLeft:n,arrowRight:r}){this.sliderLine=t.querySelector("[data-slider-line]"),this.sliderLine&&(this.sliderLine.style.cssText="position: relative; transform: translateX(0px);",this.pointsElem=e,this.pointClassName=i||"",this.pointNumber=0,this.interval,this.time=s,parseInt(s)&&(setTimeout(this.timer.bind(this)),this.sliderLine.addEventListener("mouseenter",this.stopTimer.bind(this)),this.sliderLine.addEventListener("mouseleave",this.timer.bind(this))),t.addEventListener("click",this.handleEvent.bind(this)),window.addEventListener("resize",this.reset.bind(this)))}handleEvent(t){if("click"!=t.type)return;let i=t.target.closest("[data-slider-point]");if(i)return this.time&&(this.stopTimer(),this.transitionEnd()),void this.changePoints(i.dataset.sliderPoint-1);t.target.closest("[data-slider-arrow]")&&this.arrows(t.target)}movePoints(t){let i=this.sliderLine.scrollWidth/this.sliderLine.children.length*t;this.sliderLine.style.transform=`translateX(-${i}px)`}changePoints(t){t>this.sliderLine.children.length-1||(this.pointsElem.children[this.pointNumber].classList.remove(this.pointClassName),this.pointsElem.children[t].classList.add(this.pointClassName),this.pointNumber=t,setTimeout(this.movePoints(t)))}timer(){this.interval=setInterval(()=>{let t=this.pointNumber+1;t>this.sliderLine.children.length-1&&(t=0),this.changePoints(t)},2e3)}stopTimer(){clearInterval(this.interval)}transitionEnd(){parseFloat(getComputedStyle(this.sliderLine).transitionDuration)?this.sliderLine.ontransitionend=()=>{this.timer(),this.sliderLine.ontransitionend=!1}:(this.stopTimer(),this.timer())}reset(){this.sliderLine.style.transform="translateX(0px)",this.changePoints(0)}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
